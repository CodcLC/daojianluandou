{"version":3,"sources":["assets\\script\\tscript\\core\\ResourcesPool.ts"],"names":[],"mappings":";;;;AACA,oBAAoB;AACpB,iFAAiF;AACjF,yFAAyF;AACzF,mBAAmB;AACnB,2FAA2F;AAC3F,mGAAmG;AACnG,8BAA8B;AAC9B,2FAA2F;AAC3F,mGAAmG;;AAE7F,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAyB,CAAC;AAG1C;IAA2C,iCAAY;IADvD;QAAA,qEA2EC;QArEW,WAAK,GAAsB,EAAE,CAAC;;IAqE1C,CAAC;sBA1EoB,aAAa;IAO9B,sBAAkB,yBAAQ;aAA1B;YACI,IAAG,IAAI,CAAC,SAAS,IAAI,IAAI,EACzB;gBACI,IAAI,CAAC,SAAS,GAAG,IAAI,eAAa,EAAE,CAAC;gBACrC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBAEtB,OAAM,CAAC,IAAI,CAAC,CAAC;aAEhB;YACD,OAAO,eAAa,CAAC,SAAS,CAAC;QACnC,CAAC;;;OAAA;IAEO,4BAAI,GAAZ;IAGA,CAAC;IAEM,2BAAG,GAAV,UAAW,OAAe,EAAC,GAAgB;QAAhB,oBAAA,EAAA,SAAgB;QAEvC,IAAI,GAAG,GAAU,OAAO,CAAC,MAAM,EAAE,CAAC;QAElC,IAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EACnB;YACI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;SACxB;QAED,IAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,GAAG,EAC/B;YACI,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAEjC;aACD;YACI,IAAG,OAAO,YAAY,EAAE,CAAC,SAAS,EAClC;gBACmB,OAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;aAC1C;iBAAK,IAAG,OAAO,YAAY,EAAE,CAAC,MAAM,EACrC;gBACgB,OAAQ,CAAC,OAAO,EAAE,CAAC;aAClC;iBACD;aACC;YACD,IAAI;SACP;IACL,CAAC;IAEM,2BAAG,GAAV,UAA8B,IAAsB;QAEhD,IAAI,GAAG,CAAC;QAER,IAAG,OAAO,IAAI,KAAK,UAAU,EAC7B;YACI,8BAA8B;YAC9B,GAAG,GAAS,IAAK,CAAC,IAAI,CAAC;SAC1B;aACD;YACI,GAAG,GAAW,IAAI,CAAC;SACtB;QAED,IAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,IAAI,CAAC;YAC9C,OAAO,IAAI,CAAC;QAEhB,IAAI,GAAG,GAAK,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QACpC,GAAG,CAAC,KAAK,EAAE,CAAC;QAEZ,OAAO,GAAG,CAAC;IACf,CAAC;;IAzEgB,aAAa;QADjC,OAAO;OACa,aAAa,CA0EjC;IAAD,oBAAC;CA1ED,AA0EC,CA1E0C,EAAE,CAAC,SAAS,GA0EtD;kBA1EoB,aAAa","file":"","sourceRoot":"/","sourcesContent":["\r\n// Learn TypeScript:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class ResourcesPool extends cc.Component {\r\n\r\n    private static _instance: ResourcesPool;\r\n\r\n\r\n    private trash:{[key:string]:any[]}={};\r\n\r\n    public static get instance(): ResourcesPool {\r\n        if(this._instance == null)\r\n        {\r\n            this._instance = new ResourcesPool();\r\n            this._instance.init();\r\n            \r\n            typeof(this);\r\n            \r\n        }\r\n        return ResourcesPool._instance;\r\n    }\r\n\r\n    private init()\r\n    {\r\n     \r\n    }\r\n\r\n    public put(recycle:Recycle,len:number = 100)\r\n    {\r\n        var key:string = recycle.getKey();\r\n\r\n        if(!this.trash[key])\r\n        {\r\n            this.trash[key] = [];\r\n        }\r\n        \r\n        if(this.trash[key].length < len)\r\n        {\r\n            recycle.sleep();\r\n            this.trash[key].push(recycle);\r\n\r\n        }else\r\n        {\r\n            if(recycle instanceof cc.Component)\r\n            {\r\n                (<cc.Component>recycle).node.destroy();\r\n            }else if(recycle instanceof cc.Object)\r\n            {\r\n                (<cc.Object>recycle).destroy(); \r\n            }else\r\n            {\r\n            }\r\n            //销毁\r\n        }\r\n    }\r\n\r\n    public get<T extends Recycle>(type:Function | string):T\r\n    {\r\n        var key;\r\n        \r\n        if(typeof type === 'function')\r\n        {\r\n            //key = (<Function>type).name;\r\n            key = (<any>type).name;\r\n        }else\r\n        {\r\n            key = <string>type;\r\n        }\r\n\r\n        if(!this.trash[key] || this.trash[key].length == 0)\r\n            return null;\r\n            \r\n        var obj:T = this.trash[key].shift();\r\n        obj.awake();\r\n\r\n        return obj;\r\n    }\r\n}\r\n\r\nexport interface Recycle {\r\n\r\n    getKey():string;\r\n    awake();\r\n    sleep();\r\n    destroySelf();\r\n}"]}